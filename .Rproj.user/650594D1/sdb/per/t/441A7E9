{
    "contents" : "fitted.jointModel <-\nfunction (object, process = c(\"Longitudinal\", \"Event\"), \n        type = c(\"Marginal\", \"Subject\", \"EventTime\", \"Slope\"), scale = c(\"survival\", \n        \"cumulative-Hazard\", \"log-cumulative-Hazard\"), M = 200, ...) {\n    if (!inherits(object, \"jointModel\"))\n        stop(\"Use only with 'jointModel' objects.\\n\")\n    process <- match.arg(process)\n    type <- match.arg(type)\n    scale <- match.arg(scale)\n    method <- object$method\n    if (process == \"Longitudinal\") {\n        fitY <- c(object$x$X %*% object$coefficients$betas)\n        names(fitY) <- names(object$y$y)\n        if (type == \"Marginal\") fitY else if (type == \"Subject\") fitY + object$EB$Zb \n        else if (type == \"EventTime\") {\n            fitY <- c(object$x$X %*% object$coefficients$betas) + object$EB$Zb\n            fitYEvent <- if (method == \"Cox-PH-GH\") {\n                c(object$x$Xtime2 %*% object$coefficients$betas + object$EB$Ztime2b)\n            } else {\n                c(object$x$Xtime %*% object$coefficients$betas + object$EB$Ztimeb)\n            }\n            id <- object$id\n            idT <- object$x$idT\n            fitYEvent <- unlist(mapply(\"c\", split(fitY, id), split(fitYEvent, idT)), \n                use.names = FALSE)\n            times <- object$times\n            Time <- exp(object$y$logT)\n            ind <- unlist(mapply(\"c\", split(times, id), split(Time, idT)), \n                use.names = FALSE)\n            fitYEvent <- fitYEvent[ind != 0]\n            names(fitYEvent) <- seq_along(fitYEvent)\n            fitYEvent\n        } else if (type == \"Slope\") {\n            derivForm <- object$derivForm\n            indFixed <- derivForm$indFixed\n            indRandom <- derivForm$indRandom\n            TermsX.deriv <- object$termsYx.deriv\n            TermsZ.deriv <- object$termsYz.deriv\n            mfX.deriv <- model.frame(TermsX.deriv, data = object$data)\n            mfZ.deriv <- model.frame(TermsZ.deriv, data = object$data)\n            X.deriv <- model.matrix(derivForm$fixed, mfX.deriv)\n            Z.deriv <- model.matrix(derivForm$random, mfZ.deriv)\n            betas <- object$coefficients$betas\n            b <- ranef(object)\n            id <- object$id\n            ff <- c(X.deriv %*% betas[indFixed] + \n                rowSums(Z.deriv * b[id, indRandom, drop = FALSE]))\n            names(ff) <- names(object$y$y)\n            Xtime.deriv <- object$x$Xtime.deriv\n            Ztime.derivc <- object$x$Ztime.deriv\n            ffEvent <- c(Xtime.deriv %*% betas[indFixed] + \n                rowSums(Ztime.deriv * b[, indRandom, drop = FALSE]))\n            id <- object$id\n            idT <- object$x$idT\n            ffEvent <- unlist(mapply(\"c\", split(ff, id), split(ffEvent, idT)), \n                use.names = FALSE)\n            times <- object$times\n            Time <- exp(object$y$logT)\n            ind <- unlist(mapply(\"c\", split(times, id), split(Time, idT)), \n                use.names = FALSE)\n            ffEvent <- ffEvent[ind != 0]\n            names(ffEvent) <- seq_along(ffEvent)\n            ffEvent\n        }\n    } else {\n        W1 <- object$x$W\n        if (is.null(object$x[[\"Xtime\"]])) {\n            object$x[[\"Xtime\"]] <- model.matrix(object$formYx, \n                                                model.frame(object$termsYx, data = object$data.id))\n            object$x[[\"Ztime\"]] <- model.matrix(object$formYz, \n                                                model.frame(object$termsYz, data = object$data.id))\n            object$EB[[\"Ztimeb\"]] <- rowSums(object$x[[\"Ztime\"]] * ranef(object))\n            \n        }\n        Y <- if (type == \"Marginal\") {\n            D <- object$coefficients$D\n            diag.D <- ncol(D) == 1 & (ncz <- nrow(D)) > 1\n            b <- mvrnorm(M, rep(0, ncz), if (diag.D) diag(c(D)) else D)\n            if (method == \"Cox-PH-GH\") {\n                Zb <- object$x$Ztime2 %*% t(b)\n                c(object$x$Xtime2 %*% object$coefficients$betas) + Zb\n            } else {\n                Zb <- object$x$Ztime %*% t(b)\n                c(object$x$Xtime %*% object$coefficients$betas) + Zb\n            }\n        } else {\n            if (method == \"Cox-PH-GH\") {\n                c(object$x$Xtime2 %*% object$coefficients$betas + object$EB$Ztime2b)\n            } else {\n                c(object$x$Xtime %*% object$coefficients$betas + object$EB$Ztimeb)\n            }\n        }\n        gammas <- object$coefficients$gammas\n        alpha <- object$coefficients$alpha\n        logT <- object$y$logT\n        parameterization <- object$parameterization\n        fitT <- if (method == \"Cox-PH-GH\") {\n            indT <- object$indexes$indT\n            lambda0 <- object$coefficients$lambda0[, \"basehaz\"]\n            eta.tw <- if (!is.null(W1)) as.vector(W1 %*% gammas) else 0\n            Ztime2b <- if (type == \"Marginal\") {\n                object$x$Ztime2 %*% t(b)\n            } else {\n                rowSums(object$x$Ztime2 * object$EB$post.b[indT, ])\n            }\n            Y2 <- c(object$x$Xtime2 %*% object$coefficients$betas) + Ztime2b\n            eta.s <- object$coefficients$alpha * Y2\n            if (type == \"Marginal\") {\n                S <- matrix(0, length(logT), ncol(eta.s))\n                S[unique(indT), ] <- rowsum(lambda0[object$indexes$ind.L1] * exp(eta.s), \n                    indT, reorder = FALSE)\n            } else {\n                S <- numeric(length(logT))\n                S[unique(indT)] <- tapply(lambda0[object$indexes$ind.L1] * exp(eta.s), indT, sum)\n            }\n            Haz <- exp(eta.tw) * S\n            switch(scale,\n                \"survival\" = exp(- Haz),\n                \"cumulative-Hazard\" = Haz,\n                \"log-cumulative-Hazard\" = log(Haz))\n        } else if (method == \"weibull-PH-GH\") {\n            WW <- if (is.null(W1)) as.matrix(rep(1, length(logT))) else cbind(1, W1)\n            eta.tw <- as.vector(WW %*% gammas)\n            sigma.t <- object$coefficients$sigma.t\n            P <- object$x$P\n            log.st <- log(object$x$st)\n            wk <- rep(object$x$wk, length(logT))\n            id.GK <- rep(seq_along(logT), each = object$control$GKk)\n            if (parameterization %in% c(\"value\", \"both\")) {\n                Zsb <- if (type == \"Marginal\")\n                    object$x$Zs %*% t(b)\n                else\n                    rowSums(object$x$Zs * object$EB$post.b[id.GK, ])\n                Ys <- c(object$x$Xs %*% object$coefficients$betas) + Zsb\n                eta.s <- c(object$x$Ws.intF.vl %*% object$coefficients$alpha) * Ys\n            }\n            if (parameterization %in% c(\"slope\", \"both\")) {\n                Zsb <- if (type == \"Marginal\")\n                    object$x$Zs.deriv %*% t(b[, object$derivForm$indRandom, drop = FALSE])\n                else\n                    rowSums(object$x$Zs.deriv * object$EB$post.b[id.GK, object$derivForm$indRandom, drop = FALSE])\n                Ys.deriv <- c(object$x$Xs.deriv %*% \n                    object$coefficients$betas[object$derivForm$indFixed]) + Zsb\n                eta.s <- if (parameterization == \"both\")\n                    eta.s + c(object$x$Ws.intF.sl %*% object$coefficients$Dalpha) * Ys.deriv \n                else\n                    c(object$x$Ws.intF.sl %*% object$coefficients$Dalpha) * Ys.deriv\n            }\n            Haz <- exp(eta.tw) * P * rowsum(wk * exp(log(sigma.t) + \n                (sigma.t - 1) * log.st + eta.s), id.GK, reorder = FALSE)\n            switch(scale,\n                \"survival\" = exp(- Haz),\n                \"cumulative-Hazard\" = Haz,\n                \"log-cumulative-Hazard\" = log(Haz))\n        } else if (method == \"weibull-AFT-GH\") {\n            WW <- if (is.null(W1)) as.matrix(rep(1, length(logT))) else cbind(1, W1)\n            eta.tw <- as.vector(WW %*% gammas)\n            sigma.t <- object$coefficients$sigma.t\n            P <- object$x$P\n            log.st <- log(object$x$st)\n            wk <- rep(object$x$wk, length(logT))\n            id.GK <- rep(seq_along(logT), each = object$control$GKk)\n            if (parameterization %in% c(\"value\", \"both\")) {\n                Zsb <- if (type == \"Marginal\")\n                    object$x$Zs %*% t(b)\n                else\n                    rowSums(object$x$Zs * object$EB$post.b[id.GK, ])\n                Ys <- c(object$x$Xs %*% object$coefficients$betas) + Zsb\n                eta.s <- c(object$x$Ws.intF.vl %*% object$coefficients$alpha) * Ys\n            }\n            if (parameterization %in% c(\"slope\", \"both\")) {\n                Zsb <- if (type == \"Marginal\")\n                    object$x$Zs.deriv %*% t(b[, object$derivForm$indRandom, drop = FALSE])\n                else\n                    rowSums(object$x$Zs.deriv * object$EB$post.b[id.GK, object$derivForm$indRandom, drop = FALSE])\n                Ys.deriv <- c(object$x$Xs.deriv %*% \n                    object$coefficients$betas[object$derivForm$indFixed]) + Zsb\n                eta.s <- if (parameterization == \"both\")\n                    eta.s + c(object$x$Ws.intF.sl %*% object$coefficients$Dalpha) * Ys.deriv \n                else\n                    c(object$x$Ws.intF.sl %*% object$coefficients$Dalpha) * Ys.deriv\n            }            \n            Vi <- exp(eta.tw) * P * rowsum(wk * exp(eta.s), id.GK, reorder = FALSE); dimnames(Vi) <- NULL            \n            Haz <- Vi^sigma.t\n            switch(scale,\n                \"survival\" = exp(- Haz),\n                \"cumulative-Hazard\" = Haz,\n                \"log-cumulative-Hazard\" = log(Haz))\n        } else if (method == \"spline-PH-GH\") {\n            eta.tw <- if (!is.null(W1)) as.vector(W1 %*% gammas) else 0\n            P <- object$x$P\n            wk <- rep(object$x$wk, length(logT))\n            id.GK <- rep(seq_along(logT), each = object$control$GKk)\n            if (parameterization %in% c(\"value\", \"both\")) {\n                Zsb <- if (type == \"Marginal\") {\n                    object$x$Zs %*% t(b)\n                } else {\n                    bb <- object$EB$post.b[object$x$idT, , drop = FALSE]\n                    rowSums(object$x$Zs * bb[id.GK, ])\n                }\n                Ys <- c(object$x$Xs %*% object$coefficients$betas) + Zsb\n                eta.s <- c(object$x$Ws.intF.vl %*% object$coefficients$alpha) * Ys\n            }\n            if (parameterization %in% c(\"slope\", \"both\")) {\n                Zsb <- if (type == \"Marginal\") {\n                    object$x$Zs.deriv %*% t(b[, object$derivForm$indRandom, drop = FALSE])\n                } else {\n                    bb <- object$EB$post.b[object$x$idT, , drop = FALSE]\n                    rowSums(object$x$Zs.deriv * \n                        bb[id.GK, object$derivForm$indRandom, drop = FALSE])\n                }\n                Ys.deriv <- c(object$x$Xs.deriv %*% \n                    object$coefficients$betas[object$derivForm$indFixed]) + Zsb\n                eta.s <- if (parameterization == \"both\")\n                    eta.s + c(object$x$Ws.intF.sl %*% object$coefficients$Dalpha) * Ys.deriv \n                else\n                    c(object$x$Ws.intF.sl %*% object$coefficients$Dalpha) * Ys.deriv\n            }\n            Haz <- exp(eta.tw) * P * rowsum(wk * exp(c(object$x$W2s %*% object$coefficients$gammas.bs) + eta.s), \n                id.GK, reorder = FALSE)\n            switch(scale,\n                \"survival\" = exp(- Haz),\n                \"cumulative-Hazard\" = Haz,\n                \"log-cumulative-Hazard\" = log(Haz))\n        } else if (method == \"piecewise-PH-GH\") {\n            WW <- W1\n            eta.tw <- if (!is.null(WW)) as.vector(WW %*% gammas) else 0\n            xi <- object$coefficients$xi\n            nk <- object$control$GKk\n            id.GK <- object$x$id.GK\n            ind.K <- rep(unlist(lapply(object$y$ind.D, seq_len)), each = nk)\n            wk <- unlist(lapply(object$y$ind.D, function (n) rep(object$x$wk, n)))\n            P <- c(t(object$x$P))\n            wkP <- wk * rep(P[!is.na(P)], each = nk)\n            if (parameterization %in% c(\"value\", \"both\")) {\n                Zsb <- if (type == \"Marginal\")\n                    object$x$Zs %*% t(b)\n                else\n                    rowSums(object$x$Zs * object$EB$post.b[id.GK, ])\n                Ys <- c(object$x$Xs %*% object$coefficients$betas) + Zsb\n                eta.s <- c(object$x$Ws.intF.vl %*% object$coefficients$alpha) * Ys\n            }\n            if (parameterization %in% c(\"slope\", \"both\")) {\n                Zsb <- if (type == \"Marginal\")\n                    object$x$Zs.deriv %*% t(b[, object$derivForm$indRandom, drop = FALSE])\n                else\n                    rowSums(object$x$Zs.deriv * object$EB$post.b[id.GK, object$derivForm$indRandom, drop = FALSE])\n                Ys.deriv <- c(object$x$Xs.deriv %*% \n                    object$coefficients$betas[object$derivForm$indFixed]) + Zsb\n                eta.s <- if (parameterization == \"both\")\n                    eta.s + c(object$x$Ws.intF.sl %*% object$coefficients$Dalpha) * Ys.deriv \n                else\n                    c(object$x$Ws.intF.sl %*% object$coefficients$Dalpha) * Ys.deriv\n            }\n            Haz <- exp(eta.tw) * rowsum(xi[ind.K] * wkP * exp(eta.s), id.GK, reorder = FALSE)\n            switch(scale,\n                \"survival\" = exp(- Haz),\n                \"cumulative-Hazard\" = Haz,\n                \"log-cumulative-Hazard\" = log(Haz))\n        } else {\n            W2 <- splineDesign(object$knots, logT, ord = object$control$ord)\n            WW <- if (is.null(W1)) W2 else cbind(W2, W1)\n            eta <- c(WW %*% gammas) + Y * alpha\n             switch(scale,\n                \"survival\" = exp(- exp(eta)),\n                \"cumulative-Hazard\" = exp(eta),\n                \"log-cumulative-Hazard\" = eta)\n        }\n        fitT <- if (type == \"Marginal\") rowMeans(fitT) else c(fitT)\n        names(fitT) <- names(logT)\n        fitT\n    }\n}\n",
    "created" : 1456994392930.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3454159892",
    "id" : "441A7E9",
    "lastKnownWriteTime" : 1435044060,
    "path" : "C:/Users/Dimitris/Documents/PackagesGitHub/JM/R/fitted.jointModel.R",
    "project_path" : "R/fitted.jointModel.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}