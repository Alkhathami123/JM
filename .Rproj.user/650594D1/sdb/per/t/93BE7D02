{
    "contents" : "cumHaz <-\nfunction (object, alpha.null = FALSE) {\n    method <- object$method\n    timeVar <- object$timeVar\n    interFact <- object$interFact\n    parameterization <- object$parameterization\n    derivForm <- object$derivForm\n    indFixed <- derivForm$indFixed\n    indRandom <- derivForm$indRandom\n    LongFormat <- object$LongFormat\n    CompRisk <- object$CompRisk\n    lag <- object$y$lag\n    TermsX <- object$termsYx\n    TermsZ <- object$termsYz\n    TermsX.deriv <- object$termsYx.deriv\n    TermsZ.deriv <- object$termsYz.deriv\n    formYx <- reformulate(attr(delete.response(TermsX), \"term.labels\"))\n    formYz <- object$formYz\n    id <- object$id\n    idT <- object$x$idT\n    W <- object$x$W\n    WintF.vl <- object$x$WintF.vl\n    WintF.sl <- object$x$WintF.sl\n    wk <- gaussKronrod(object$control$GKk)$wk\n    sk <- gaussKronrod(object$control$GKk)$sk\n    Time0 <- object$times\n    last.t <- if (LongFormat) tapply(exp(object$y$logT), object$x$idT, tail, 1) else exp(object$y$logT)\n    tt <- if (!CompRisk) {\n        mapply(function (x, y) if (!x[1]) c(x[-1], y) else c(x, y),\n            split(Time0, id), last.t)\n    } else {\n        mapply(function (x, y) if (!x[1]) c(x[-1], y) else c(x, y),\n            split(Time0, id)[idT], last.t)\n    }\n    ni <- sapply(tt, length)\n    id <- rep(seq_along(tt), ni)\n    Time1 <- unlist(tt, use.names = FALSE)\n    P <- Time1 / 2\n    P1 <- Time1 / 2\n    st <- outer(P, sk) + P1\n    id.GK <- rep(seq_along(Time1), each = object$control$GKk)\n    id.T <- rep(id, each = object$control$GKk)\n    data.id <- object$data.id\n    data2 <- data.id[id.T, ]\n    data2[[timeVar]] <- pmax(c(t(st)) - lag, 0)\n    betas <- object$coefficients$betas\n    gammas <- object$coefficients$gammas\n    alpha <- object$coefficients$alpha\n    Dalpha <- object$coefficients$Dalpha\n    if (alpha.null) {\n        alpha <- Dalpha <- 0\n    }\n    b <- ranef(object)\n    if (parameterization %in% c(\"value\", \"both\")) {\n        mfX <- model.frame(delete.response(TermsX), data = data2)\n        mfZ <- model.frame(TermsZ, data = data2)\n        Xs <- model.matrix(formYx, mfX)\n        Zs <- model.matrix(formYz, mfZ)\n        Ws.intF.vl <- WintF.vl[id.T, , drop = FALSE]\n    }\n    if (parameterization %in% c(\"slope\", \"both\")) {\n        mfX.deriv <- model.frame(TermsX.deriv, data = data2)\n        mfZ.deriv <- model.frame(TermsZ.deriv, data = data2)\n        Xs.deriv <- model.matrix(derivForm$fixed, mfX.deriv)\n        Zs.deriv <- model.matrix(derivForm$random, mfZ.deriv)\n        Ws.intF.sl <- WintF.sl[id.T, , drop = FALSE]\n    }\n    if (CompRisk)\n        id.T <- rep(ceiling(id/object$x$nRisks), each = object$control$GKk)\n    if (parameterization %in% c(\"value\", \"both\"))\n        Ys <- as.vector(Xs %*% betas + rowSums(Zs * b[id.T, , drop = FALSE]))\n    if (parameterization %in% c(\"slope\", \"both\"))\n        Ys.deriv <- as.vector(Xs.deriv %*% betas[indFixed]) + \n            rowSums(Zs.deriv * b[id.T, indRandom, drop = FALSE])\n    tt <- switch(parameterization,\n        \"value\" = c(Ws.intF.vl %*% alpha) * Ys, \n        \"slope\" = c(Ws.intF.sl %*% Dalpha) * Ys.deriv,\n        \"both\" = c(Ws.intF.vl %*% alpha) * Ys + \n            c(Ws.intF.sl %*% Dalpha) * Ys.deriv)\n    eta.tw <- if (!is.null(W)) {\n        if (method == \"weibull-PH-GH\") \n            as.vector(cbind(1, W) %*% gammas)\n        else\n            as.vector(W %*% gammas)\n    } else rep(0, nrow(data.id))\n    if (length(eta.tw) < length(id))\n        eta.tw <- eta.tw[id]\n    if (method == \"weibull-PH-GH\") {\n        sigma.t <- object$coefficients$sigma.t\n        Vi <- exp(log(sigma.t) + (sigma.t - 1) * log(c(t(st))) + tt)\n        exp(eta.tw) * P * tapply(wk * Vi, id.GK, sum)    \n    } else if (method == \"weibull-AFT-GH\") {\n        sigma.t <- object$coefficients$sigma.t\n        Vi <- exp(eta.tw) * P * tapply(wk * tt, id.GK, sum)\n        Vi^sigma.t\n    } else if (method == \"spline-PH-GH\") {\n        gammas.bs <- object$coefficients$gammas.bs\n        W2s <- if (length(kn <- object$control$knots) == 1) {\n            splineDesign(unlist(kn, use.names = FALSE), c(t(st)), \n                ord = object$control$ord, outer.ok = TRUE)\n        } else {\n            strt <- object$y$strata\n            strt.id <- if (!CompRisk) strt[id] else rep(strt[id], each = object$control$GKk)\n            kn <- object$control$knots\n            w2s <- lapply(kn, function (kn) \n                splineDesign(kn, c(t(st)), ord = object$control$ord, \n                    outer.ok = TRUE))\n            w2s <- mapply(function (w2s, ind) {\n                w2s[strt.id == ind, ] <- 0\n                w2s\n            }, w2s, levels(strt), SIMPLIFY = FALSE)\n            do.call(cbind, w2s)\n        }\n        Vi <- exp(c(W2s %*% gammas.bs) + tt)\n        if (!CompRisk) {\n            exp(eta.tw) * P * tapply(wk * Vi, id.GK, sum)\n        } else {\n            ind.CR <- unlist(mapply(function (id, ni) paste(id, seq(1, ni), sep = \".\"), idT, ni), \n                use.names = FALSE)\n            ind.CR <- factor(ind.CR, levels = unique(ind.CR))\n            tapply(exp(eta.tw) * P * tapply(wk * Vi, id.GK, sum), ind.CR, sum)\n        }\n    } else if (method == \"piecewise-PH-GH\") {\n        xi <- object$coefficients$xi\n        qs <- c(0, object$control$knots, max(exp(object$y$logT)) + 1)\n        ind.K <- findInterval(c(t(st)), qs, rightmost.closed = TRUE)\n        exp(eta.tw) * P * tapply(wk * xi[ind.K] * exp(tt), id.GK, sum)    \n    }\n}\n",
    "created" : 1457004461735.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "148740298",
    "id" : "93BE7D02",
    "lastKnownWriteTime" : 1457004566,
    "path" : "C:/Users/Dimitris/Documents/PackagesGitHub/JM/R/cumHaz.R",
    "project_path" : "R/cumHaz.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}