{
    "contents" : "plot.jointModel <- function (x, which = 1:4, caption = c(\"Residuals vs Fitted\", \"Normal Q-Q\", \"Marginal Survival\", \n    \"Marginal Cumulative Hazard\", \"Marginal log Cumulative Hazard\", \"Baseline Hazard\", \"Cumulative Baseline Hazard\", \n    \"Subject-specific Survival\", \"Subject-specific Cumulative Hazard\", \"Subject-specific log Cumulative Hazard\"), \n    survTimes = NULL, main = \"\", ask = prod(par(\"mfcol\")) < length(which) && dev.interactive(), ..., ids = NULL, \n    add.smooth = getOption(\"add.smooth\"), add.qqline = TRUE, add.KM = FALSE, cex.caption = 1, return = FALSE) {\n    if (!inherits(x, \"jointModel\"))\n        stop(\"Use only with 'jointModel' objects.\\n\")\n    if (!is.numeric(which) || any(which < 1) || any(which > 10))\n        stop(\"'which' must be in 1:10.\\n\")\n    show <- rep(FALSE, 10)\n    if ((x$LongFormat || x$CompRisk) && any(which %in% c(3:5, 8:10))) {\n        warning(\"\\n  the marginal and subject-specific survival and cumulative \", \n            \"hazard functions\\n  are not currently implemented for joint models \", \n            \"with exogenous time-dependent\\n  covariates or competing risks.\")\n        which <- 1:2\n    }\n    show[which] <- TRUE\n    method <- x$method\n    if (any(show[6], show[7]) && method != \"Cox-PH-GH\") {\n        show[6] <- show[7] <- FALSE\n        warning(\"the baseline hazard and the cumulative baseline hazard are only plotted for the 'Cox-PH-GH' method.\\n\")\n    }   \n    if (any(show[c(3:5, 8:10)])) {\n        if (is.null(ids))\n            ids <- seq_len(x$n)\n        if (is.null(survTimes) || !is.numeric(survTimes))\n            survTimes <- seq(min(exp(x$y$logT)), max(exp(x$y$logT)), length.out = 31)\n        log.survTimes <- log(survTimes)\n        nt <- length(survTimes)\n        n <- x$n\n        W1 <- x$x$W\n        gammas <- x$coefficients$gammas\n        alpha <- x$coefficients$alpha\n        Dalpha <- x$coefficients$Dalpha\n        parameterization <- x$parameterization\n        derivForm <- x$derivForm\n        indFixed <- derivForm$indFixed\n        indRandom <- derivForm$indRandom\n        fitT <- if (method == \"Cox-PH-GH\") {\n            lambda0 <- x$coefficients$lambda0[, \"basehaz\"]\n            unqT <- x$coefficients$lambda0[, \"time\"]\n            T.mat <- matrix(exp(log.survTimes), nrow = n, ncol = nt, byrow = TRUE)\n            eta.tw <- if (!is.null(W1)) as.vector(W1 %*% gammas) else rep(0, n)\n            Haz <- matrix(0, n, nt)\n            for (i in 1:nt) {\n                times <- lapply(T.mat[, i], function (t) unqT[t >= unqT])\n                ind.len <- sapply(times, length)\n                indT <- rep(1:nrow(x$data.id), ind.len)\n                data.id2 <- x$data.id[indT, ]\n                data.id2[[x$timeVar]] <- pmax(unlist(times, use.names = FALSE) - x$y$lag, 0)\n                mfX <- model.frame(x$termsYx, data = data.id2)\n                mfZ <- model.frame(x$termsYz, data = data.id2)\n                Xtime2 <- model.matrix(x$formYx, mfX)\n                Ztime2 <- model.matrix(x$formYz, mfZ)\n                nk <- as.vector(sapply(split(indT, indT), length))\n                ind.L1 <- unlist(lapply(nk, seq, from = 1))\n                Y2 <- c(Xtime2 %*% x$coefficients$betas + rowSums(Ztime2 * x$EB$post.b[indT, ]))\n                eta.s <- alpha * Y2\n                S <- numeric(n)\n                S[unique(indT)] <- tapply(lambda0[ind.L1] * exp(eta.s), indT, sum)\n                Haz[, i] <- exp(eta.tw) * S\n            }\n            list(\"survival\" = exp(- Haz), \"cumulative-Hazard\" = Haz, \"log-cumulative-Hazard\" = log(Haz))\n        } else if (method == \"weibull-PH-GH\") {\n            T.mat <- matrix(exp(log.survTimes), nrow = n, ncol = nt, byrow = TRUE)\n            WW <- if (is.null(W1)) as.matrix(rep(1, n)) else cbind(1, W1)\n            eta.tw <- as.vector(WW %*% gammas)\n            sigma.t <- x$coefficients$sigma.t\n            b <- x$EB$post.b\n            wk <- gaussKronrod(x$control$GKk)$wk\n            sk <- gaussKronrod(x$control$GKk)$sk\n            id.GK <- rep(seq_len(n), each = x$control$GKk)\n            Haz <- matrix(0, n, nt)\n            for (i in 1:nt) {\n                P <- T.mat[, i] / 2\n                st <- outer(P, sk + 1)\n                data.id <- x$data.id[id.GK, ]\n                data.id[[x$timeVar]] <- pmax(c(t(st)) - x$y$lag, 0)\n                if (parameterization %in% c(\"value\", \"both\")) {\n                    mfX <- model.frame(x$termsYx, data = data.id)\n                    mfZ <- model.frame(x$termsYz, data = data.id)\n                    Xs <- model.matrix(x$formYx, mfX)\n                    Zs <- model.matrix(x$formYz, mfZ)\n                    Ys <- c(Xs %*% x$coefficients$betas) + rowSums(Zs * b[id.GK, , drop = FALSE])\n                    eta.s <- c(x$x$WintF.vl[id.GK, , drop = FALSE] %*% alpha) * Ys\n                }\n                if (parameterization %in% c(\"slope\", \"both\")) {\n                    mfX.deriv <- model.frame(x$termsYx.deriv, data = data.id)\n                    mfZ.deriv <- model.frame(x$termsYz.deriv, data = data.id)\n                    Xs.deriv <- model.matrix(derivForm$fixed, mfX.deriv)\n                    Zs.deriv <- model.matrix(derivForm$random, mfZ.deriv)\n                    Ys.deriv <- c(Xs.deriv %*% x$coefficients$betas[indFixed]) +\n                        if (length(indRandom) > 1 || indRandom) \n                            rowSums(Zs.deriv * b[id.GK, indRandom, drop = FALSE])\n                        else\n                            0\n                    eta.s <- if (parameterization == \"both\")\n                        eta.s + c(x$x$WintF.sl[id.GK, , drop = FALSE] %*% Dalpha) * Ys.deriv\n                    else\n                        c(x$x$WintF.sl[id.GK, , drop = FALSE] %*% Dalpha) * Ys.deriv\n                }\n                log.st <- log(c(t(st)))\n                Haz[, i] <- exp(eta.tw) * P * rowsum(wk * exp(log(sigma.t) + (sigma.t - 1) * log.st + eta.s), \n                    id.GK, reorder = FALSE)\n            }\n            list(\"survival\" = exp(- Haz),\n                 \"cumulative-Hazard\" = Haz,\n                 \"log-cumulative-Hazard\" = log(Haz))\n        } else if (method == \"weibull-AFT-GH\") {\n            T.mat <- matrix(exp(log.survTimes), nrow = n, ncol = nt, byrow = TRUE)\n            WW <- if (is.null(W1)) as.matrix(rep(1, n)) else cbind(1, W1)\n            eta.tw <- as.vector(WW %*% gammas)\n            sigma.t <- x$coefficients$sigma.t\n            b <- x$EB$post.b\n            wk <- gaussKronrod(x$control$GKk)$wk\n            sk <- gaussKronrod(x$control$GKk)$sk\n            id.GK <- rep(seq_len(n), each = x$control$GKk)\n            Haz <- matrix(0, n, nt)\n            for (i in 1:nt) {\n                P <- T.mat[, i] / 2\n                st <- outer(P, sk + 1)\n                data.id <- x$data.id[id.GK, ]\n                data.id[[x$timeVar]] <- pmax(c(t(st)) - x$y$lag, 0)\n                if (parameterization %in% c(\"value\", \"both\")) {\n                    mfX <- model.frame(x$termsYx, data = data.id)\n                    mfZ <- model.frame(x$termsYz, data = data.id)\n                    Xs <- model.matrix(x$formYx, mfX)\n                    Zs <- model.matrix(x$formYz, mfZ)\n                    Ys <- c(Xs %*% x$coefficients$betas) + rowSums(Zs * b[id.GK, , drop = FALSE])\n                    eta.s <- c(x$x$WintF.vl[id.GK, , drop = FALSE] %*% alpha) * Ys\n                }\n                if (parameterization %in% c(\"slope\", \"both\")) {\n                    mfX.deriv <- model.frame(x$termsYx.deriv, data = data.id)\n                    mfZ.deriv <- model.frame(x$termsYz.deriv, data = data.id)\n                    Xs.deriv <- model.matrix(derivForm$fixed, mfX.deriv)\n                    Zs.deriv <- model.matrix(derivForm$random, mfZ.deriv)\n                    Ys.deriv <- c(Xs.deriv %*% x$coefficients$betas[indFixed]) +\n                        if (length(indRandom) > 1 || indRandom) \n                            rowSums(Zs.deriv * b[id.GK, indRandom, drop = FALSE])\n                        else\n                            0\n                    eta.s <- if (parameterization == \"both\")\n                        eta.s + c(x$x$WintF.sl[id.GK, , drop = FALSE] %*% Dalpha) * Ys.deriv\n                    else\n                        c(x$x$WintF.sl[id.GK, , drop = FALSE] %*% Dalpha) * Ys.deriv\n                }\n                log.st <- log(c(t(st)))\n                Vi <- exp(eta.tw) * P * rowsum(wk * exp(eta.s), id.GK, reorder = FALSE); dimnames(Vi) <- NULL\n                Haz[, i] <- Vi^sigma.t\n            }\n            list(\"survival\" = exp(- Haz),\n                 \"cumulative-Hazard\" = Haz,\n                 \"log-cumulative-Hazard\" = log(Haz))\n        } else if (method == \"piecewise-PH-GH\") {\n            T.mat <- matrix(exp(log.survTimes), nrow = n, ncol = nt, byrow = TRUE)\n            Q <- x$x$Q\n            qs <- c(0, x$control$knots, max(exp(x$y$logT)) + 1)\n            WW <- W1\n            eta.tw <- if (!is.null(WW)) as.vector(WW %*% gammas) else 0\n            xi <- x$coefficients$xi\n            b <- x$EB$post.b\n            sk <- gaussKronrod(x$control$GKk)$sk\n            nk <- length(sk)\n            Haz <- matrix(0, n, nt)\n            for (i in 1:nt) {\n                ind.D <- findInterval(T.mat[, i], qs, rightmost.closed = TRUE)\n                Tiq <- outer(T.mat[, i], qs, pmin)\n                Lo <- Tiq[, 1:Q]\n                Up <- Tiq[, 2:(Q+1)]\n                T <- Up - Lo\n                P <- T / 2\n                P[P < x$control$tol3] <- as.numeric(NA)\n                P1 <- (Up + Lo) / 2\n                st <- matrix(0, n, nk*Q)\n                skQ <- rep(sk, Q)\n                for (ii in 1:n) {\n                    st[ii, ] <- rep(P[ii, ], each = nk) * skQ + rep(P1[ii, ], each = nk)\n                }\n                data.id2 <- x$data.id[rep(1:n, each = nk*Q), ]\n                data.id2[[x$timeVar]] <- pmax(c(t(st)) - x$y$lag, 0)\n                id.GK <- rep(1:n, rowSums(!is.na(st)))\n                if (parameterization %in% c(\"value\", \"both\")) {\n                    mfX <- model.frame(x$termsYx, data = data.id2)\n                    mfZ <- model.frame(x$termsYz, data = data.id2)\n                    Xs <- model.matrix(x$formYx, mfX)\n                    Zs <- model.matrix(x$formYz, mfZ)\n                    #Zs <- Zs[!is.na(data.id2[[x$timeVar]]), ]\n                    Ys <- c(Xs %*% x$coefficients$betas) + rowSums(Zs * b[id.GK, , drop = FALSE])\n                    eta.s <- c(x$x$WintF.vl[id.GK, , drop = FALSE] %*% alpha) * Ys\n                }\n                if (parameterization %in% c(\"slope\", \"both\")) {\n                    mfX.deriv <- model.frame(x$termsYx.deriv, data = data.id2)\n                    mfZ.deriv <- model.frame(x$termsYz.deriv, data = data.id2)\n                    Xs.deriv <- model.matrix(derivForm$fixed, mfX.deriv)\n                    Zs.deriv <- model.matrix(derivForm$random, mfZ.deriv)\n                    #Zs.deriv <- Zs.deriv[!is.na(data.id2[[x$timeVar]]), ]\n                    Ys.deriv <- c(Xs.deriv %*% x$coefficients$betas[indFixed]) +\n                        if (length(indRandom) > 1 || indRandom) \n                            rowSums(Zs.deriv * b[id.GK, indRandom, drop = FALSE])\n                        else\n                            0\n                    eta.s <- if (parameterization == \"both\") \n                        eta.s + c(x$x$WintF.sl[id.GK, , drop = FALSE] %*% Dalpha) * Ys.deriv \n                    else \n                        c(x$x$WintF.sl[id.GK, , drop = FALSE] %*% Dalpha) * Ys.deriv\n                }\n                ind.K <- rep(unlist(lapply(ind.D, seq_len)), each = nk)\n                wk <- unlist(lapply(ind.D, function (n) rep(gaussKronrod(x$control$GKk)$wk, n)))\n                P <- c(t(P))\n                wkP <- wk * rep(P[!is.na(P)], each = nk)\n                Haz[, i] <- exp(eta.tw) * rowsum(xi[ind.K] * wkP * exp(eta.s), id.GK, reorder = FALSE)\n            }\n            list(\"survival\" = exp(- Haz),\n                 \"cumulative-Hazard\" = Haz,\n                 \"log-cumulative-Hazard\" = log(Haz))\n        } else if (method == \"spline-PH-GH\") {\n            T.mat <- matrix(exp(log.survTimes), nrow = n, ncol = nt, byrow = TRUE)\n            eta.tw1 <- if (!is.null(W1)) as.vector(W1 %*% gammas) else 0\n            gammas.bs <- x$coefficients$gammas.bs\n            b <- x$EB$post.b\n            wk <- gaussKronrod(x$control$GKk)$wk\n            sk <- gaussKronrod(x$control$GKk)$sk\n            id.GK <- rep(seq_len(n), each = x$control$GKk)\n            Haz <- matrix(0, n, nt)\n            for (i in 1:nt) {\n                P <- T.mat[, i] / 2\n                st <- outer(P, sk + 1)\n                data.id <- x$data.id[id.GK, ]\n                data.id[[x$timeVar]] <- pmax(c(t(st)) - x$y$lag, 0)\n                if (parameterization %in% c(\"value\", \"both\")) {\n                    mfX <- model.frame(x$termsYx, data = data.id)\n                    mfZ <- model.frame(x$termsYz, data = data.id)\n                    Xs <- model.matrix(x$formYx, mfX)\n                    Zs <- model.matrix(x$formYz, mfZ)\n                    Ys <- c(Xs %*% x$coefficients$betas) + rowSums(Zs * b[id.GK, , drop = FALSE])\n                    eta.s <- c(x$x$WintF.vl[id.GK, , drop = FALSE] %*% alpha) * Ys\n                }\n                if (parameterization %in% c(\"slope\", \"both\")) {\n                    mfX.deriv <- model.frame(x$termsYx.deriv, data = data.id)\n                    mfZ.deriv <- model.frame(x$termsYz.deriv, data = data.id)\n                    Xs.deriv <- model.matrix(derivForm$fixed, mfX.deriv)\n                    Zs.deriv <- model.matrix(derivForm$random, mfZ.deriv)\n                    Ys.deriv <- c(Xs.deriv %*% x$coefficients$betas[indFixed]) +\n                        if (length(indRandom) > 1 || indRandom) \n                            rowSums(Zs.deriv * b[id.GK, indRandom, drop = FALSE])\n                        else\n                            0\n                    eta.s <- if (parameterization == \"both\")\n                        eta.s + c(x$x$WintF.sl[id.GK, , drop = FALSE] %*% Dalpha) * Ys.deriv\n                    else\n                        c(x$x$WintF.sl[id.GK, , drop = FALSE] %*% Dalpha) * Ys.deriv\n                }\n                strt.s <- rep(x$y$strata, each = x$control$GKk)\n                split.Time <- split(c(t(st)), strt.s)\n                W2s <- mapply(function (k, t) splineDesign(k, t, ord = x$control$ord, outer.ok = TRUE), \n                    x$control$knots, split.Time, SIMPLIFY = FALSE)\n                W2s <- mapply(function (w2s, ind) {\n                    out <- matrix(0, n * x$control$GKk, ncol(w2s))\n                    out[strt.s == ind, ] <- w2s\n                    out\n                }, W2s, levels(strt.s), SIMPLIFY = FALSE)\n                W2s <- do.call(cbind, W2s)\n                eta.ws <- c(W2s %*% gammas.bs)\n                Haz[, i] <- exp(eta.tw1) * P * rowsum(wk * exp(eta.ws + eta.s), id.GK, reorder = FALSE)\n            }\n            list(\"survival\" = exp(- Haz),\n                 \"cumulative-Hazard\" = Haz,\n                 \"log-cumulative-Hazard\" = log(Haz))\n        } else {\n            W2 <- splineDesign(x$knots, log.survTimes, ord = x$control$ord)\n            Y <- c(x$x$Xtime %*% x$coefficients$betas + x$EB$Ztimeb)\n            eta <- apply(W2, 1, function (x) {\n                w <- matrix(x, n, length(x), TRUE)\n                WW <- if (is.null(W1)) w else cbind(w, W1)\n                c(WW %*% gammas) + Y * alpha\n            })\n            list(\"survival\" = exp(- exp(eta)), \"cumulative-Hazard\" = exp(eta), \"log-cumulative-Hazard\" = eta)\n        }\n    }\n    if (!return)\n        one.fig <- prod(par(\"mfcol\")) == 1\n    if (ask && !return) {\n        op <- par(ask = TRUE)\n        on.exit(par(op))\n    }\n    if (show[1] && !return) {\n        fitY <- fitted(x, process = \"Longitudinal\", type = \"Subject\")\n        resY <- residuals(x, process = \"Longitudinal\", type = \"Subject\")\n        plot(fitY, resY, xlab = \"Fitted Values\", ylab = \"Residuals\", main = main, ...)\n        if (add.smooth) {\n            abline(h = 0, lty = 3, col = \"grey\", lwd = 2)\n            panel.smooth(fitY, resY, lwd = 2)\n        }\n        mtext(caption[1], 3, 0.25, cex = cex.caption)\n    } \n    if (show[2] && !return) {\n        resY <- residuals(x, process = \"Longitudinal\", type = \"stand-Subject\")\n        qqnorm(resY, ylab = \"Standardized Residuals\", main = main, ...)\n        if (add.qqline)\n            qqline(resY, lty = 3, col = \"grey50\")\n        mtext(caption[2], 3, 0.25, cex = cex.caption)\n    }\n    if (show[3] && !return) {\n        strata <- if (is.null(x$y$strata)) gl(1, n) else x$y$strata\n        yy <- rowsum(fitT[[\"survival\"]], strata) / as.vector(table(strata))\n        if (add.KM) {\n            Time <- exp(x$y$logT)\n            failure <- x$y$d\n            sf <- survfit(Surv(Time, failure) ~ strata)\n            plot(sf, xlab = \"Time\", ylab = \"Survival\", main = main, mark.time = FALSE)\n            matlines(survTimes, t(yy), ...)\n        } else {\n            matplot(survTimes, t(yy), xlab = \"Time\", ylab = \"Survival\", main = main, ylim = c(0, 1), type = \"l\", ...)\n        }\n        mtext(caption[3], 3, 0.25, cex = cex.caption)\n    }\n    if (show[4] && !return) {\n        strata <- if (is.null(x$y$strata)) gl(1, n) else x$y$strata\n        yy <- rowsum(fitT[[\"cumulative-Hazard\"]], strata) / as.vector(table(strata))\n        matplot(survTimes, t(yy), xlab = \"Time\", ylab = \"Cumulative Hazard\", main = main, type = \"l\", ...)\n        mtext(caption[4], 3, 0.25, cex = cex.caption)\n    }\n    if (show[5] && !return) {\n        strata <- if (is.null(x$y$strata)) gl(1, n) else x$y$strata\n        yy <- rowsum(fitT[[\"log-cumulative-Hazard\"]], strata) / as.vector(table(strata))\n        plot(survTimes, t(yy), xlab = \"Time\", ylab = \"log Cumulative Hazard\", main = main, type = \"l\", ...)\n        mtext(caption[5], 3, 0.25, cex = cex.caption)\n    }\n    if (show[6] && !return) {\n        lambda0 <- x$coefficients$lambda0\n        plot(lambda0[, \"time\"], lambda0[, \"basehaz\"], xlab = \"Time\", ylab = \"\", main = main, ...)\n        if (add.smooth) {\n            panel.smooth(lambda0[, \"time\"], lambda0[, \"basehaz\"], lwd = 2)\n        }\n        mtext(caption[6], 3, 0.25, cex = cex.caption)\n    }\n    if (show[7] && !return) {\n        lambda0 <- x$coefficients$lambda0\n        plot(lambda0[, \"time\"], cumsum(lambda0[, \"basehaz\"]), xlab = \"Time\", ylab = \"\", main = main, type = \"s\", ...)\n        mtext(caption[7], 3, 0.25, cex = cex.caption)\n    }\n    if (show[8] && !return) {\n        yy <- t(fitT[[\"survival\"]])\n        matplot(survTimes, yy[, ids], type = \"l\", col = \"black\", lty = 1, \n            xlab = \"Time\", ylab = \"Survival\", main = main, ylim = c(0, 1), ...)\n        mtext(caption[8], 3, 0.25, cex = cex.caption)\n    }\n    if (show[9] && !return) {\n        yy <- t(fitT[[\"cumulative-Hazard\"]])\n        matplot(survTimes, yy[, ids], type = \"l\", col = \"black\", lty = 1, \n            xlab = \"Time\", ylab = \"Cumulative Hazard\", main = main, ...)\n        mtext(caption[9], 3, 0.25, cex = cex.caption)\n    }\n    if (show[10] && !return) {\n        yy <- t(fitT[[\"log-cumulative-Hazard\"]])\n        matplot(survTimes, yy[, ids], type = \"l\", col = \"black\", lty = 1, \n            xlab = \"Time\", ylab = \"log Cumulative Hazard\", main = main, ...)\n        mtext(caption[10], 3, 0.25, cex = cex.caption)\n    }\n    if (return)\n        invisible(c(fitT, list(survTimes = survTimes)))\n    else \n        invisible()\n}\n",
    "created" : 1443616032513.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "371507903",
    "id" : "680830F5",
    "lastKnownWriteTime" : 1443616038,
    "path" : "C:/Users/Dimitris/Documents/PackagesGitHub/JM/R/plot.jointModel.R",
    "project_path" : "R/plot.jointModel.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}